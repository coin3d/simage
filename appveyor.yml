version: 1.8.1-{branch}-ci-{build}

branches:
  only:
  - master
  - /v\d*\.\d*\.\d*/

# do not build feature branches with open pull requests
skip_branch_with_pr: true

#shallow clone does not work when submodules are involved!
#shallow_clone: true

matrix:
  fast_finish: true # set this flag to immediately finish build once one of the jobs fails.

environment:
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: macos-mojave
      CMAKE_GENERATOR: 'Unix Makefiles'
      CMAKE_PLATFORM: x64
      COMPILER_ID: clang

    - APPVEYOR_BUILD_WORKER_IMAGE: macos
      CMAKE_GENERATOR: 'Unix Makefiles'
      CMAKE_PLATFORM: x64
      COMPILER_ID: clang

    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      CMAKE_GENERATOR: 'Unix Makefiles'
      CMAKE_PLATFORM: x86
      CMAKE_ARCH_FLAGS: -m32
      COMPILER_ID: gcc

    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      CMAKE_GENERATOR: 'Unix Makefiles'
      CMAKE_PLATFORM: x64
      CMAKE_ARCH_FLAGS: -m64
      COMPILER_ID: gcc

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      CMAKE_GENERATOR: 'Visual Studio 10 2010'
      CMAKE_ARCHITECTURE: Win32
      CMAKE_PLATFORM: x86
      COMPILER_ID: msvc10

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      CMAKE_GENERATOR: 'Visual Studio 10 2010'
      CMAKE_ARCHITECTURE: x64
      CMAKE_PLATFORM: x64
      COMPILER_ID: msvc10

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      CMAKE_GENERATOR: 'Visual Studio 14 2015'
      CMAKE_ARCHITECTURE: Win32
      CMAKE_PLATFORM: x86
      COMPILER_ID: msvc14

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      CMAKE_GENERATOR: 'Visual Studio 14 2015'
      CMAKE_ARCHITECTURE: x64
      CMAKE_PLATFORM: x64
      COMPILER_ID: msvc14

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      CMAKE_GENERATOR: 'Visual Studio 15 2017'
      CMAKE_ARCHITECTURE: Win32
      CMAKE_PLATFORM: x86
      COMPILER_ID: msvc15

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      CMAKE_GENERATOR: 'Visual Studio 15 2017'
      CMAKE_ARCHITECTURE: x64
      CMAKE_PLATFORM: x64
      COMPILER_ID: msvc15

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      CMAKE_GENERATOR: 'Visual Studio 16 2019'
      CMAKE_ARCHITECTURE: Win32
      CMAKE_PLATFORM: x86
      COMPILER_ID: msvc16

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      CMAKE_GENERATOR: 'Visual Studio 16 2019'
      CMAKE_ARCHITECTURE: x64
      CMAKE_PLATFORM: x64
      COMPILER_ID: msvc16

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      CMAKE_GENERATOR: 'MSYS Makefiles'
      CMAKE_PLATFORM: i686
      COMPILER_ID: mingw32

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      CMAKE_GENERATOR: 'MSYS Makefiles'
      CMAKE_PLATFORM: x86_64
      COMPILER_ID: mingw64

install:
  - sh: |
      cd $APPVEYOR_BUILD_FOLDER
      if [ "$COMPILER_ID" != "clang" ]; then sudo apt-get update && sudo apt-get -y install gcc-multilib g++-multilib libpng-dev libjpeg-dev libgif-dev libtiff-dev libogg-dev libvorbis-dev libsndfile-dev zlib1g-dev; fi
      if [ "$COMPILER_ID" = "clang" ]; then brew install jpeg giflib libtiff libogg libvorbis libsndfile zlib; fi
  - cmd: |
      cd %APPVEYOR_BUILD_FOLDER%
      set PATH=%APPVEYOR_BUILD_FOLDER%\downloads\doxygen-1.8.14;%PATH%
      if "%CMAKE_GENERATOR%" == "MSYS Makefiles" set PATH=C:\msys64\%COMPILER_ID%\bin;C:\msys64\usr\bin\;%PATH%
      if "%CMAKE_GENERATOR%" == "MSYS Makefiles" pacman --noconfirm -Syu
      if "%CMAKE_GENERATOR%" == "MSYS Makefiles" pacman --noconfirm -S mingw-w64-%CMAKE_PLATFORM%-zlib mingw-w64-%CMAKE_PLATFORM%-giflib mingw-w64-%CMAKE_PLATFORM%-libjpeg-turbo mingw-w64-%CMAKE_PLATFORM%-jasper mingw-w64-%CMAKE_PLATFORM%-libtiff mingw-w64-%CMAKE_PLATFORM%-libogg mingw-w64-%CMAKE_PLATFORM%-libvorbis mingw-w64-%CMAKE_PLATFORM%-libsndfile
  - git submodule update --init --recursive

# Assumes that we use the vx.y.z tagging scheme (e.g. v1.3.0)
before_build:
  - cmd: |
      if defined APPVEYOR_REPO_TAG_NAME (set CI_REPO_VERSION=%APPVEYOR_REPO_TAG_NAME:~1%) else (set CI_REPO_VERSION=latest)
      set BUILD_SOURCE_ARCHIVE=%APPVEYOR_PROJECT_NAME%-%CI_REPO_VERSION%-src.zip
      7z a -xr!*\.git/ -tzip %BUILD_SOURCE_ARCHIVE% %APPVEYOR_BUILD_FOLDER%
      mkdir %APPVEYOR_BUILD_FOLDER%\downloads
      set DOWNLOAD_FILE_DOXYGEN=doxygen-1.8.14.windows.x64.bin.zip
      appveyor DownloadFile https://sourceforge.net/projects/doxygen/files/rel-1.8.14/%DOWNLOAD_FILE_DOXYGEN% -FileName %DOWNLOAD_FILE_DOXYGEN%
      7z x %DOWNLOAD_FILE_DOXYGEN% -o%APPVEYOR_BUILD_FOLDER%\downloads\doxygen-1.8.14
      doxygen --version
      if "%CMAKE_GENERATOR%" == "MSYS Makefiles" cmake -H. -Bbuild_debug   -G "%CMAKE_GENERATOR%" -DCMAKE_BUILD_TYPE=Debug   -DSIMAGE_USE_STATIC_LIBS=ON -DCMAKE_INSTALL_PREFIX=%APPVEYOR_BUILD_FOLDER%/Coin3D
      if "%CMAKE_GENERATOR%" == "MSYS Makefiles" cmake -H. -Bbuild_release -G "%CMAKE_GENERATOR%" -DCMAKE_BUILD_TYPE=Release -DSIMAGE_USE_STATIC_LIBS=ON -DCMAKE_INSTALL_PREFIX=%APPVEYOR_BUILD_FOLDER%/Coin3D
      if not "%CMAKE_GENERATOR%" == "MSYS Makefiles" cmake -H. -Bbuild -G "%CMAKE_GENERATOR%" -A %CMAKE_ARCHITECTURE% -DCMAKE_INSTALL_PREFIX=%APPVEYOR_BUILD_FOLDER%\Coin3D
  - sh: |
      if [ -n "${APPVEYOR_REPO_TAG_NAME}" ]; then export CI_REPO_VERSION=${APPVEYOR_REPO_TAG_NAME:1}; else export CI_REPO_VERSION=latest; fi
      BUILD_SOURCE_ARCHIVE=$APPVEYOR_PROJECT_NAME-$CI_REPO_VERSION-src.tar.gz
      if [ ! -d "$APPVEYOR_BUILD_FOLDER/../$APPVEYOR_PROJECT_NAME" ]; then cp -r $APPVEYOR_BUILD_FOLDER $APPVEYOR_BUILD_FOLDER/../$APPVEYOR_PROJECT_NAME; fi
      cd $APPVEYOR_BUILD_FOLDER/..
      tar czf $BUILD_SOURCE_ARCHIVE --exclude .git $APPVEYOR_PROJECT_NAME
      mv $BUILD_SOURCE_ARCHIVE $APPVEYOR_BUILD_FOLDER
      cd $APPVEYOR_BUILD_FOLDER
      export CFLAGS=$CMAKE_ARCH_FLAGS
      export CXXFLAGS=$CMAKE_ARCH_FLAGS
      cmake -H. -Bbuild_debug   -G "$CMAKE_GENERATOR" -DCMAKE_BUILD_TYPE=Debug   -DCMAKE_INSTALL_PREFIX=$APPVEYOR_BUILD_FOLDER/Coin3D
      cmake -H. -Bbuild_release -G "$CMAKE_GENERATOR" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$APPVEYOR_BUILD_FOLDER/Coin3D

build_script:
  - cmd: |
      set BUILD_TOOL_OPTIONS=/nologo /verbosity:minimal /maxcpucount /property:MultiProcessorCompilation=true;CL_MPCount=3
      if "%CMAKE_GENERATOR%" == "MSYS Makefiles" cmake --build build_debug   --target install --config Debug   -- -j4
      if "%CMAKE_GENERATOR%" == "MSYS Makefiles" cmake --build build_release --target install --config Release -- -j4
      if not "%CMAKE_GENERATOR%" == "MSYS Makefiles" cmake --build build --target INSTALL --config Debug   -- %BUILD_TOOL_OPTIONS%
      if not "%CMAKE_GENERATOR%" == "MSYS Makefiles" cmake --build build --target INSTALL --config Release -- %BUILD_TOOL_OPTIONS%
  - sh: |
      BUILD_TOOL_OPTIONS=-j4
      cmake --build build_debug   --target install --config Debug   -- $BUILD_TOOL_OPTIONS
      cmake --build build_release --target install --config Release -- $BUILD_TOOL_OPTIONS

after_build:
  - cmd: |
      cd %APPVEYOR_BUILD_FOLDER%
      if "%CMAKE_GENERATOR%" == "MSYS Makefiles" for /f %%i in ('gcc -dumpversion') do set GCC_VERSION=%%i
      if "%CMAKE_GENERATOR%" == "MSYS Makefiles" set COMPILER_ID=mingw-gcc%GCC_VERSION:.=%
      if defined APPVEYOR_REPO_TAG_NAME (set CI_REPO_VERSION=%APPVEYOR_REPO_TAG_NAME:~1%) else (set CI_REPO_VERSION=latest)
      set BUILD_ARCHIVE=%APPVEYOR_PROJECT_NAME%-%CI_REPO_VERSION%-%COMPILER_ID%-%CMAKE_PLATFORM%.zip
      7z a -tzip %BUILD_ARCHIVE% Coin3D
      appveyor DownloadFile https://ci.appveyor.com/api/buildjobs/%APPVEYOR_JOB_ID%/log -FileName %APPVEYOR_PROJECT_NAME%-%CI_REPO_VERSION%-%COMPILER_ID%-%CMAKE_PLATFORM%.log
  - sh: |
      cd $APPVEYOR_BUILD_FOLDER
      if [ "$COMPILER_ID" != "clang" ]; then export COMPILER_ID=$APPVEYOR_BUILD_WORKER_IMAGE-$COMPILER_ID`$COMPILER_ID -dumpversion | tr '.' '\n'`; fi
      if [ "$COMPILER_ID" = "clang" ]; then export COMPILER_ID=$APPVEYOR_BUILD_WORKER_IMAGE-$COMPILER_ID`$COMPILER_ID -v 2>&1 | grep version | sed 's/^.*version \([0-9]*\)\.[0-9]*\.[0-9]*.*$/\1/g'`; fi
      if [ -n "${APPVEYOR_REPO_TAG_NAME}" ]; then export CI_REPO_VERSION=${APPVEYOR_REPO_TAG_NAME:1}; else export CI_REPO_VERSION=latest; fi
      BUILD_ARCHIVE=$APPVEYOR_PROJECT_NAME-$CI_REPO_VERSION-$COMPILER_ID-$CMAKE_PLATFORM.tar.gz
      tar czf $BUILD_ARCHIVE Coin3D/*
      appveyor DownloadFile https://ci.appveyor.com/api/buildjobs/$APPVEYOR_JOB_ID/log -FileName $APPVEYOR_PROJECT_NAME-$CI_REPO_VERSION-$COMPILER_ID-$CMAKE_PLATFORM.log

artifacts:
  - path: $(APPVEYOR_PROJECT_NAME)*.zip
    name: CIArchives
  - path: $(APPVEYOR_PROJECT_NAME)*.tar.gz
    name: CIArchivesTGZ
  - path: $(APPVEYOR_PROJECT_NAME)*.log
    name: logs

#test_script:
#  - cmd: |
#      cd build
#      ctest -C Release -VV
#  - sh: |
#      cd build_release
#      ctest -C Release -VV

notifications:
  - provider: Email
    to:
      - '{{commitAuthorEmail}}'
      - coin-support@coin3d.org
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true

deploy:
  # Deploy to GitHub Releases
  - provider: GitHub
    auth_token:
      secure: 850frgRGZcc4Cljd2P7Ej68no4/kkl4EMB+DjnX725wcKBRJuFk/kGRdJGyKXd2u # your encrypted token from GitHub
    artifact: CIArchives, CIArchivesTGZ, logs
    tag: 'CI builds'
    description: 'Results of CI builds for various platforms'
    draft: false
    prerelease: true
    force_update: true
    on:
      APPVEYOR_REPO_TAG: false      # deploy on untagged builds only
#      branch: master                # release from master branch only

  # Deploy to GitHub Releases
  - provider: GitHub
    auth_token:
      secure: 850frgRGZcc4Cljd2P7Ej68no4/kkl4EMB+DjnX725wcKBRJuFk/kGRdJGyKXd2u # your encrypted token from GitHub
    artifact: CIArchives, CIArchivesTGZ
    tag: $(APPVEYOR_REPO_TAG_NAME)
    description: 'Release build'
    draft: true
    prerelease: true
    force_update: true
    on:
      APPVEYOR_REPO_TAG: true       # deploy on tag push only
